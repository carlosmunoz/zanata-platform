#!/usr/bin/env zsh

# Author: Sean Flanigan <sflaniga@redhat.com>

# This script is a helper which runs Maven to build Zanata.
# IMPORTANT: This script is only intended for devs/QA, not for automation.
# Options are subject to change without notice.

# TODO list:
# - new option (or -f?) to run individual functional test by name
# - new option to run cargo:run (to allow IDE to run some functional tests)
# - xvfb-run, and new option -X to turn off
# - allocate-jboss-ports, and new option -p to turn off
# - new option (-r? -d?) to package server and run docker/rundev.sh
# - use -Dgwt.validateOnly for --skip-package
# - set webdriver properties and SMTP_PORT for functional tests?

set -e # exit script in case of error

#############################################
# set up basic variables
#############################################

# :a allows this script be linked in to a different zanata
# worktree and run against it.
# :A will follow symlinks, :a will not
DIR=${0:a:h}

ROOT=$(realpath --relative-to="$PWD" "$DIR")
scriptname="$0"
mvn=$ROOT/mvnw

#############################################

#############################################
# utility function(s)
#############################################

die() {
  echo ERROR: "$@"
  exit 1
}

#############################################


#############################################
# print usage help
#############################################

# NB: please keep help() and zparseopts in sync!
help() {
  cat <<EOF
Usage: $scriptname <build-target> <options>

Build targets (choose one):
    --client, --server or --all (client and server)

General options:
    -h, --help      this usage help
    -q, --quiet     (mvn -q)
    -X, --debug     (mvn -X)
    -o, --offline   (mvn -o)
    -c, --clean     (mvn clean)
    -C, --clean-partial
                    removes various generated files from server without running a full mvn clean
                    (takari lifecycle handles this in jar modules)
    -P, --skip-package
                    runs mvn test instead of mvn package
    -i, --install   (mvn install)
    -Q, --quick     skips all tests
    -U, --skip-unit-tests
                    (-DskipUnitTests)
    -A, --analyse   checkstyle,findbugs,... (-DstaticAnalysis)
    -O, --optimise  enables JS/GWT optimisations (-Doptimise)
    --full          equivalent to -O --analyse --verify-all; all possible tests and optimisations
    -n, --dry-run   output the mvn command line, don't run it
    --              pass through remaining options to mvn command line
                    eg ./build.sh --server -Q -- -Dchrome

Server options:
    --skip-install-node     skip node/npm install in frontend
    --skip-npm-install      skip run npm install in frontend
    -F, --skip-frontend     skip building frontend
    -G, --skip-gwt          skip building gwt-editor
    -a, --arquillian-tests  runs arquillian integration tests
    -f, --functional-tests LEVEL
                            run some or all functional tests
        -f 1 enable basic functional tests
        -f 9 enable all functional tests
    --verify                equivalent to -a -f 1
    --verify-all            equivalent to -a -f 9
    --eap                   (-Dappserver=jbosseap6)
    --wildfly               (-Dappserver=wildfly8)
EOF
}

#############################################

# we can't leave this until after zparseopts because of the -D option
if (( # == 0 )); then
  help
  exit
fi


#############################################
# parse CLI options into array variables
#############################################

# zparseopts primer:
# -D : delete all recognised options from $@
# -K : keep array variables untouched if no corresponding option
# a=arg puts any -a params into the array arg
# a:=arg puts -a and its value (eg -a 1) into the array arg
# -long-arg=arg puts any --long-arg params into the array arg also

# NB: please keep help() and zparseopts in sync!
zparseopts -D -K -- \
  -client=client \
  -server=server \
  -all=all \
  h=help -help=help \
  q=quiet -quiet=quiet \
  X=debug -debug=debug \
  o=offline -offline=offline \
  c=clean -clean=clean \
  C=cleanPartial -clean-partial=cleanPartial \
  i=install -install=install \
  P=skipPackage -skip-package=skipPackage \
  Q=quick -quick=quick \
  U=skipUnitTests -skip-unit-tests=skipUnitTests \
  A=analyse -analyse=analyse \
  O=optimise -optimise=optimise \
  -full=full \
  n=dryRun -dry-run=dryRun \
  -skip-install-node=skipInstallNode \
  -skip-npm-install=skipNpmInstall \
  F=skipFrontend -skip-frontend=skipFrontend \
  G=skipGwt -skip-gwt=skipGwt \
  a=arqTests -arquillian-tests=arqTests \
  f:=funcTests -functional-tests=funcTests \
  -verify=verify \
  -verify-all=verifyAll \
  -eap=eap \
  -wildfly=wildfly \
# don't remove this comment: note the line continuation above (\)

#############################################


#############################################
# start processing options
#############################################

if (( $+help )); then
  help
  exit
fi

#############################################


#############################################
# choose build targets (project list)
#############################################

unset skipProjects
if (( $+skipGwt )); then
  skipProjects="$skipProjects,!:gwt-editor"
fi
if (( $+skipFrontend )); then
  skipProjects="$skipProjects,!:zanata-frontend"
fi

unset targetopts
if (( $+all || (( $+client && $+server )) )); then
  targetopts=all
elif (( $+client )); then
  targetopts=client
elif (( $+server )); then
  targetopts=server
fi

if (( $+targetopts )); then
  if [[ $targetopts == 'client' ]]; then
    targets=(-pl :zanata-maven-client,:zanata-cli${skipProjects} -am)
  elif [[ $targetopts == 'server' ]]; then
    targets=(-pl :zanata-war${skipProjects} -am)
  elif (( $+skipProjects )) ; then
    targets=(-pl "${skipProjects}" -am)
  else
    targets=
  fi
else
  help
  die "no target options specified; choose one: --client --server --all"
fi

echo targets: $targets

#############################################


#############################################
# choose lifecycle phases/goals
#############################################
if (( $+clean )); then
  goals=(clean)
else
  goals=()
fi
if (( $+skipPackage )); then
  goals+=(test)
else
  goals+=(package)
fi

if (( $+verify || $+verifyAll || $+arqTests || $+funcTests )); then
  goals+=(verify)
fi
if (( $+install )); then
  goals+=(install)
fi

echo goals: $goals

#############################################


#############################################
# set Maven properties
#############################################

if (( $+arqTests || $+verify || $+verifyAll )); then
  skipArq=''
else
  skipArq=-DskipArqTests
fi
if (( $+funcTests || $+verify || $+verifyAll )); then
  skipFunc=''
else
  skipFunc=-DskipFuncTests
fi

mvnopts=($skipArq $skipFunc)

if (( $+verifyAll || funcTests[2] == 9 )); then
  mvnopts+=(-DallFuncTests)
fi
if (( $+quick )); then
  mvnopts+=(-DskipTests -DskipArqTests -DskipFuncTests)
fi

if (( $+quiet )); then
  mvnopts+=(--quiet)
fi
if (( $+debug )); then
  mvnopts+=(--debug)
fi
if (( $+offline )); then
  mvnopts+=(--offline)
fi
if (( $+skipUnitTests )); then
  mvnopts+=(-DskipUnitTests)
fi
if (( $+analyse || $+full )); then
  mvnopts+=(-DstaticAnalysis)
fi
if (( $+optimise || $+full )); then
  mvnopts+=(-Doptimise)
fi
if (( $+skipInstallNode )); then
  mvnopts+=(-Dskip.installnodenpm)
fi
if (( $+skipNpmInstall )); then
  mvnopts+=(-Dskip.npminstall)
fi
if (( $+eap )); then
  mvnopts+=(-Dappserver=jbosseap6)
fi
if (( $+wildfly )); then
  mvnopts+=(-Dappserver=wildfly8)
fi

echo mvnopts: $mvnopts

#############################################


#############################################
# partial cleaning (for --clean-partial)
#############################################

unset precommandline
if (($+cleanPartial)); then
  precommandline="/bin/rm -rf
    $ROOT/server/**/target/**/*.war
    $ROOT/server/**/target/**/*.xml
    $ROOT/server/functional-test/target/zanataindex/
    $ROOT/server/zanata-war/target/zanatasearchindex/
    $ROOT/server/zanata-war/target/zanata/WEB-INF/lib/"
fi

#############################################


#############################################
# build command line and run commands
#############################################

commandline="$mvn $goals $targets $mvnopts $@"

if (( $+dryRun )); then
  if (( $+precommandline )); then
    echo '[dry-run]' "$precommandline"
  fi
  echo '[dry-run]' "$commandline"
else
  if (( $+precommandline )); then
    echo '[exec]' "$precommandline"
    sh -c "$precommandline"
  fi
  echo '[exec]' "$commandline"
  sh -c "$commandline"
fi

#############################################
